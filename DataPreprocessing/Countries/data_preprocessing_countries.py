# -*- coding: utf-8 -*-
"""data_preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aYOmfEANTOLLx6qhdrkrdXHf0-xgC8JL

# Data Preprocessing Tools

## Importing the libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""## Importing the dataset"""

dataSet = pd.read_csv('Data.csv')
x = dataSet.iloc[:, :-1].values
y = dataSet.iloc[:, -1].values

from google.colab import drive
drive.mount('/content/drive')

print(x)

print(y)

"""## Taking care of missing data"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')
imputer.fit(x[:, 1:3])
x[:, 1:3] = imputer.transform(x[:, 1:3])

print(x)

"""## Encoding categorical data

### Encoding the Independent Variable
"""

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers = [('encoder', OneHotEncoder(), [0])], remainder = 'passthrough')
x = np.array(ct.fit_transform(x))
#variáveis fictícias - transformando textos em números

print(x)

"""### Encoding the Dependent Variable"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)

print(y)

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
#20% destinado ao teste e 80% ao treino
x_train, x_test, y_train, y_test = train_test_split( x, y, test_size = 0.2, random_state = 1)

print(x_train)

print(x_test)

print(y_train)

print(y_test)

"""## Feature Scaling"""

#para nada ser "dominado" e ser desconsiderado pela ML
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train[:, 3:] = sc.fit_transform(x_train[:, 3:])
#"normalização" entre -3 e 3
#xSacaled = x - mean(x)/max(x)-min(x)
x_test[:, 3:] = sc.transform(x_test[:, 3:])

print(x_train)

print(x_test)